#!/bin/bash

set -eu -o pipefail

NODE_MAJOR_VERSION=20
export NVM_DIR="$HOME/.nvm"

display_usage() {
    echo -e "Usage: ./dev <command>"
    echo -e ""
    echo -e "Available commands:"
    echo -e "  setup                                      install necessary environment for developing with this project on Debian."
    echo -e "  edit                                       launch vscode on this project."
    echo -e "  deps:run                                   starts the backend dev database and other dev dependencies."
    echo -e "  deps:stop                                  stops the backend dev database and the other dev dependencies."
    echo -e "  deps:reset                                 erase the backend dev database and the other dev dependencies containers and their data."
    echo -e "  db:console                                 opens the backend dev database psql console."
    echo -e "  db:create-migration NAME                   creates a new migration script for the backend database with name NAME."
    echo -e "  back:run                                   runs backend server."
    echo -e "  back:check                                 runs backend lint and test."
    echo -e "  back:lint                                  runs backend lint."
    echo -e "  back:test                                  runs backend tests."
    echo -e "  back:gen-mocks                             let mockery generate test mocks for our interfaces."
    echo -e "  front1:install [NPM OPTIONS]               install frontend 1 (Nuxt + Vue) dependencies."
    echo -e "  front1:reinstall                           flush /node_modules et package-lock.json and install."
    echo -e "  front1:run                                 starts frontend 1 (Nuxt + Vue) development server."
    echo -e "  front1:check                               runs frontend 1 (Nuxt + Vue) lint and test."
    echo -e "  front1:lint                                runs frontend 1 (Nuxt + Vue) lint."
    echo -e "  front1:test                                runs frontend 1 (Nuxt + Vue) tests."
    echo -e "  front2:install [NPM OPTIONS]               install frontend 2 (Vite + Preact) dependencies."
    echo -e "  front2:reinstall                           flush /node_modules et package-lock.json and install."
    echo -e "  front2:run                                 starts frontend 2 (Vite + Preact) development server."
    echo -e "  front2:check                               runs frontend 2 (Vite + Preact) lint and test."
    echo -e "  front2:lint                                runs frontend 2 (Vite + Preact) lint."
    echo -e "  front2:test                                runs frontend 2 (Vite + Preact) tests."
    echo -e "  simprod:start                              simulate build and deployment in a production env, locally."
    echo -e "  simprod:stop                               stops simulated prod."
    echo -e "  simprod:reset                              stops simulated prod and delete containers and their data."
    echo -e "  simprod:logs                               display logs of simulated prod."
    echo -e "  ci                                         run Continuous Integration."
}

setup() {
    # adds go migrate repo: https://github.com/golang-migrate/migrate/tree/master/cmd/migrate
    if sudo test ! -e "/etc/apt/sources.list.d/migrate.list"; then
        echo "[SETUP] golang-migrate not found. Installing."
        sudo sudo apt-get update
        sudo sudo apt install -y lsb-release    
        sudo sudo mkdir -m 0755 -p /etc/apt/keyrings/
        curl -fsSL "https://packagecloud.io/golang-migrate/migrate/gpgkey" | sudo gpg --dearmor -o /etc/apt/keyrings/migrate.gpg
        echo "deb [signed-by=/etc/apt/keyrings/migrate.gpg] https://packagecloud.io/golang-migrate/migrate/debian/ $(lsb_release -sc 2>/dev/null) main" | sudo tee /etc/apt/sources.list.d/migrate.list > /dev/null
    else
        echo "[SETUP] golang-migrate already installed, skipping."
    fi
    # ejson
    if ! command -v ejson -v &> /dev/null; then
        echo "[SETUP] ejson not found. Installing."
        TEMP_DEB="$(mktemp --suffix=.deb)"
        wget -O "$TEMP_DEB" 'https://github.com/Shopify/ejson/releases/download/v1.5.2/ejson_1.5.2_linux_amd64.deb'
        sudo apt install -y -f "$TEMP_DEB"
        rm -f "$TEMP_DEB"
    else
        echo "[SETUP] ejson already installed, skipping."
    fi

    # installs the rest
    sudo apt-get update
    sudo apt install -y golang-1.22 migrate

    # nodejs
    if ! [ -s "$NVM_DIR/nvm.sh" ]; then
        echo "[SETUP] nvm not found. Installing."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
        source ~/.bashrc
    else
        echo "[SETUP] nvm already installed, skipping."
    fi
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    if ! nvm ls ${NODE_MAJOR_VERSION} | grep -q "v20."; then
        echo "[SETUP] Node JS v20 not found. Installing."
        nvm install 20
    else
        echo "[SETUP] Node JS v20 already installed, skipping."
    fi
    nvm use 20

    # golangci-lint
    if ! command -v golangci-lint --version &> /dev/null; then
        echo "[SETUP] golangci-lint not found. Installing."
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.60.2
    else
        echo "[SETUP] golangci-lint already installed, skipping."
    fi

    # VSCode
    if ! command -v code --version &> /dev/null; then
        echo "[SETUP] VSCode not found. Installing."
        # https://code.visualstudio.com/docs/setup/linux
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
        sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
        echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null
        rm -f packages.microsoft.gpg
        sudo apt install -y apt-transport-https
        sudo apt update
        sudo apt install -y code
    else
        echo "[SETUP] VSCode already installed, skipping."
    fi

    # this hook is making sure we are not commiting unencrypted secrets
    mkdir -p ./.git/hooks
    cp ./ops/git/hooks/pre-commit ./.git/hooks/

    echo ""
    echo "[SETUP] To finalize the setup:"
    echo ""
    echo '1) add go and GOPATH binaries to your PATH in your ~/.profile:'
    echo 'PATH="/usr/lib/go-1.22/bin:$PATH"'
    echo 'PATH="$(go env GOPATH)/bin:$PATH"'
    echo ""
    echo '2) install Docker Desktop if not done. On Windows / WSL, use Chocolatey to do so. On pure Debian, use apt.'
    echo ""
    echo '3) create an admin user in SuperTokens: [TODO: automate]'
    echo './dev deps:run'
    echo "curl --location --request POST 'http://localhost:3567/recipe/dashboard/user' --header 'rid: dashboard' --header 'Content-Type: application/json' --data-raw '{\"email\": \"admin@fakemail.com\",\"password\": \"admin123\"}'"
}

edit() {
    code .
}

deps_run() {
    docker-compose -f ops/docker-compose.dev.yml up --detach --no-recreate --remove-orphans
}

deps_stop() {
    docker-compose -f ops/docker-compose.dev.yml stop
}

deps_reset() {
    docker-compose -f ops/docker-compose.dev.yml down
}

db_console() {
    docker exec -it go_postgres_ctnr psql -U postgres
}

db_create-migration() {
    migrate create -dir ops/db/migrations -format 20060102150405 -ext sql $1
}

backend_run() {
    (cd backend && go run main.go)
}

backend_lint() {
    (cd backend && echo "Linting..." && golangci-lint run --show-stats)
}

backend_test() {
    (cd backend && echo "Testing..." && go test -v ./...)
}

backend_gen-mocks() {
    (cd backend && docker run -v "$PWD":/src -w /src vektra/mockery --all)
}

frontend1_install() {
    (cd frontend && npm install "$@")
}

frontend1_reinstall() {
    (cd frontend &&  rm -rf node_modules && rm package-lock.json && npm install)
}

frontend1_run() {
    (cd frontend && npm run dev)
}

frontend1_lint() {
    (cd frontend && echo "Linting..." && npm run lint && npm run typecheck)
}

frontend1_test() {
    (cd frontend2 && echo "Testing..." && npm run test)
}

frontend2_install() {
    (cd frontend2 && npm install "$@")
}

frontend2_reinstall() {
    (cd frontend2 &&  rm -rf node_modules && rm package-lock.json && npm install)
}

frontend2_run() {
    (cd frontend2 && npm run dev)
}

frontend2_lint() {
    (cd frontend2 && echo "Linting..." && npm run lint && npm run typecheck)
}

frontend2_test() {
    (cd frontend2 && echo "Testing..." && npm run test)
}

simprod_start() {
    docker build --tag fullstackgonuxtjs . && \
    docker-compose -f ./ops/docker-compose.yml -p fakegoprod up -d && \
    docker ps -a
}

simprod_stop() {
    docker-compose -f ./ops/docker-compose.yml -p fakegoprod stop
}

simprod_reset() {
    docker-compose -f ./ops/docker-compose.yml -p fakegoprod down
}

simprod_logs() {
    docker-compose -f ./ops/docker-compose.yml -p fakegoprod logs --follow
}

ci() {
    docker-compose --progress tty --file ./ops/ci/docker-compose.backci.yml --project-name fullstackgoci up --remove-orphans --force-recreate --abort-on-container-exit
    docker-compose --progress tty --file ./ops/ci/docker-compose.backci.yml --project-name fullstackgoci down
    docker-compose --progress tty --file ./ops/ci/docker-compose.frontci.yml --project-name fullstackgoci up --remove-orphans --force-recreate --abort-on-container-exit
    docker-compose --progress tty --file ./ops/ci/docker-compose.frontci.yml --project-name fullstackgoci down
}

case "${1:-}" in
    setup)
        setup
    ;;
    edit)
        edit
    ;;
    deps:run)
        deps_run
    ;;
    deps:stop)
        deps_stop
    ;;
    deps:reset)
        deps_reset
    ;;
    db:console)
        db_console
    ;;
    db:create-migration)
        db_create-migration $2
    ;;
    back:run)
        backend_run
    ;;
    back:check)
        backend_lint; backend_test
    ;;
    back:lint)
        backend_lint
    ;;
    back:test)
        backend_test
    ;;
    back:gen-mocks)
        backend_gen-mocks
    ;;
    front1:install)
        shift
        frontend1_install "$@"
    ;;
    front1:reinstall)
        frontend1_reinstall
    ;;
    front1:run)
        frontend1_run
    ;;
    front1:check)
        frontend1_lint; frontend1_test
    ;;
    front1:lint)
        frontend1_lint
    ;;
    front1:test)
        frontend1_test
    ;;
    front2:install)
        shift
        frontend2_install "$@"
    ;;
    front2:reinstall)
        frontend2_reinstall
    ;;
    front2:run)
        frontend2_run
    ;;
    front2:check)
        frontend2_lint; frontend2_test
    ;;
    front2:lint)
        frontend2_lint
    ;;
    front2:test)
        frontend2_test
    ;;    
    simprod:start)
        simprod_start
    ;;
    simprod:stop)
        simprod_stop
    ;;
    simprod:reset)
        simprod_reset
    ;;
    simprod:logs)
        simprod_logs
    ;;
    ci)
        ci
    ;;
    *)
        display_usage
    ;;
esac
